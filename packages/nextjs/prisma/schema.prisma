// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum TestnetBlockchainSupportedType {
 SEPOLIA
 OPTIMISM
 MUMBAI
 FUJI
 BNB
 BASE

}
enum MainnetBlockchainSupportedType {
 ETHEREUM
 OPTIMISM
 POLYGON
 ARBITRUM
 AVALANCHE
 BNB
 BASE

}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    phone         String?   @unique
    emailVerified DateTime? @default(now())
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]
    wallets      Wallet[]
    walletCategories      WalletCategory[]
    interactiveAddresses      InteractiveAddress[]
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
}
model InteractiveAddress {
    id            String    @id @default(cuid())
    address          String
    userId       String
    chain TestnetBlockchainSupportedType?
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([userId])
}
model WalletCategory {
    id            String    @id @default(cuid())
    name          String
    userId       String
    wallets      Wallet[]
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([userId])
}
model Wallet {
    id            String    @id @default(cuid())
    color          String?
    name          String
    address          String
    chain TestnetBlockchainSupportedType?
    isMasterWallet Boolean? @default(false)
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    walletCategoryId       String?
    category         WalletCategory?     @relation(fields: [walletCategoryId], references: [id], onDelete: Cascade)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt
    @@index([userId])
    @@index([walletCategoryId])
    // TODO: Add restriction for address and chain to be unique
}


model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires      DateTime
    @@index([userId])
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    @@index([userId])

    @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
